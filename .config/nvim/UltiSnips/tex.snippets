global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
endglobal

snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[dutch]{babel}
\usepackage{amsmath, amssymb}


% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1

\begin{document}
	$0
\end{document}
endsnippet

snippet be "begin{} / end{}" bA
\\begin{$1}
	$2
\\end{$1}
$0
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet "bbb|иии" "bold" rA
\textbf{$1}$0 
endsnippet

snippet "iii|шшш" "itelic" rA
\textit{$1}$0
endsnippet

snippet eq "Equation" bA
\begin{equation}\label{eq:${1:equat}}
	$2
\end{equation}
$0
endsnippet

snippet "en|ут" "Enumerate" brA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet "it|ше" "Itemize" brA
\begin{itemize}
	\item $1
\end{itemize}
$0
endsnippet

snippet "de|ву" "Description" br
\begin{description}
	\item[$1] $0
\end{description}
endsnippet


#don't remove line below. It's create one space so user doesn't need to tap 'Enter'
snippet "ni|тш" "\item (recursive)" ir

\item $1
endsnippet

snippet "s|ы" "section" br
\section{$1}
$0
endsnippet

snippet "ss|ыы" "section" br
\subsection{$1}
$0
endsnippet

snippet "sss|ыыы" "section" br
\subsubsection{$1}
$0
endsnippet

context "math()"
snippet aal "alpha" Ai
\alpha
endsnippet

context "math()"
snippet bbe "beta" Ai
\beta
endsnippet

context "math()"
snippet gga "gamma" Ai
\gamma
endsnippet

context "math()"
snippet dde "delta" Ai
\delta
endsnippet

context "math()"
snippet eep "epsilon" Ai
\varepsilon
endsnippet

context "math()"
snippet eet "eta" Ai
\eta
endsnippet

context "math()"
snippet tth "theta" Ai
\theta
endsnippet

context "math()"
snippet DDe "Delta" Ai
\Delta
endsnippet

context "math()"
snippet lla "lambda" Ai
\lambda
endsnippet

context "math()"
snippet mmu "mu" Ai
\mu
endsnippet

context "math()"
snippet ppi "pi" Ai
\pi
endsnippet

context "math()"
snippet rrh "rho" Ai
\rho
endsnippet

context "math()"
snippet ssi "sigma" Ai
\sigma
endsnippet

context "math()"
snippet tta "tau" Ai
\tau
endsnippet

context "math()"
snippet pph "phi" Ai
\varphi
endsnippet

context "math()"
snippet OOm "Omega" Ai
\Omega
endsnippet

context "math()"
snippet oom "omega" Ai
\omega
endsnippet

context "math()"
snippet pps "psi" Ai
\psi
endsnippet

context "math()"
snippet xxi "xi" Ai
\xi
endsnippet

context "math()"
snippet nnu "nu" Ai
\nu
endsnippet

context "math()"
snippet PPh "Phi" Ai
\Phi
endsnippet

context "math()"
snippet nna "nabla" iA
\nabla
endsnippet

context "math()"
snippet vec "vector" iA
\vec{$1}$0
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} d${4:x}$0
endsnippet

context "math()"
snippet tte "text" iA
\text{$1}$0
endsnippet

snippet ca "cases" bA
\begin{equation}\label{eq:${1:cases}}
	\begin{cases}
		$2
	\end{cases}
\end{equation}
$0
endsnippet     

# it doesn't need personal bedin equation - eand equation, because I can create equation and create aligned inside it. If I understand too late that I need aligned, I can highlight it, press tab and vuala.
snippet al "Align" bA
\begin{aligned}
	${1:${VISUAL}}
\end{aligned}
endsnippet

snippet "p|з" "paragraph" br
\paragraph{$1}
$0
endsnippet

snippet ф "функци" w
функци
endsnippet

snippet app "approximate" iA
\approx 
endsnippet

snippet quad "space" iA
\quad 
endsnippet

snippet qquad "bigger space" iA
\qquad 
endsnippet

snippet sp "subparagraph" b
\subparagraph{$1}
$0
endsnippet

context "math()"
snippet over "over" iA
\overline{$1}$0
endsnippet

snippet tilde "tilde" wA
\widetilde{$1}$0
endsnippet

context "math()"
snippet to "to" iA
\to 
endsnippet

context "math()"
snippet imp "implies" Ai
\implies
endsnippet

snippet sum "sum" wA
\sum_{${1:n=1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet lim "limit" wA
\lim_{${1:n} \to ${2:\infty}} $0
endsnippet

context "math()"
snippet times "cross" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

# $0 In the end, so new sentence from new line, not like ". New sentence..."
snippet dm "Math" bA
\[
${1:${VISUAL}}
\] 
$0
endsnippet

snippet eref "eqref" wA
\eqref{eq:$1}$0
endsnippet

snippet ref "reference" wA
\ref{$1}$0
endsnippet

snippet kk "subscript" iA
_{$1}$0
endsnippet

# to avoid mkk-> $k$
snippet __ "subsctipt" iA
_{$1}$0
endsnippet


# whitespace after sr, cb, td, rd because they should be the last
context "math()"
snippet sr "^2" iA
^2 
endsnippet

context "math()"
snippet cb "^3" iA
^3 
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1} $0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)} $0
endsnippet

context "math()"
snippet neq "not equals" iA
\neq 
endsnippet

context "math()"
snippet pm "plus minus" iA
\pm
endsnippet

# if mistake, hard to erase "+", "-", "=".  Plus sometimes isn't comfortable to have spaces

#snippet + "+" iA
# + 
#endsnippet
#
#context "math()"
#snippet - "-" iA
# - 
#endsnippet
#
#snippet = "=" iA
# = 
#endsnippet

snippet in "input" bA
\input{$1}
$0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet ooo "\infty" iA
\infty
endsnippet

context "math()"
snippet le "leq" wA
\le 
endsnippet

context "math()"
snippet ge "geq" wA
\ge 
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet


context "math()"
snippet // "Fraction" iA
\\cfrac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\cfrac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol cfrac" wrA
\\cfrac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() cfrac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\cfrac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

snippet taylor "taylor" w
\sum_{${0:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\cfrac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet


snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet


context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|zeta|oint|iiint|iint|int|sim)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet


snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

snippet || "mid" iA
\mid 
endsnippet


context "math()"
snippet cc "subset" Ai
\subset 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet NN "n" iA
\N
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet empo "emptyset" iA
\O
endsnippet

snippet RR "real" iA
\R
endsnippet

snippet QQ "Q" iA
\Q
endsnippet

snippet ZZ "Z" iA
\Z
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

snippet SI "SI" iA
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "dot" "dot" riA
\dot{$1}$0
endsnippet

priority 50
context "math()"
snippet "ddot" "ddot" riA
\ddot{$1}$0
endsnippet

priority 100
context "math()"
snippet "dddot" "dddot" riA
\dddot{$1}$0
endsnippet

snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet


snippet HH "H" iA
\mathbb{H}
endsnippet




# vim:ft=snippets 
